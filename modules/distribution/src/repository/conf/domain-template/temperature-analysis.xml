<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<templateDomain name="TemperatureAnalysis">
    <description>Temperature Analysis Description</description>
    <templates>
        <template name="Template1">
            <description>Trigger alert by specifying minimum maximum temperature values and maximum total duration
                value
            </description>
            <executionPlan>
                <![CDATA[
               /* Enter a unique ExecutionPlan */
                    @Plan:name('TemperatureAnalysis')

                    /* Enter a unique description for ExecutionPlan */
                    -- @Plan:description('ExecutionPlan')

                    /* define streams/tables and write queries here ... */



                    @Import('deviceHealthStream:1.0.0')
                    define stream deviceHealthStream (smartDeviceHealthRecordId int, smartDeviceId int, gatewayId int, eventId int, eventTime string, eventTypeId int, lightIntensity int, temperature float, humidity float, soundLevel float, isDoorOpen bool, powerStatusId int, batteryLevel float, createdOn string);

                    @Import('deviceDoorStream:1.0.0')
                    define stream deviceDoorStream (smartDeviceDoorStatusId int, smartDeviceId int, gatewayId int, eventTime string, EventId int, doorOpen string, createdOn string, doorOpenDuration int);

                    @Export('alertStream:1.0.0')
                    define stream alertStream2 (smartDeviceId int, gatewayId int, totalDuration long, averageTemperature double);

                    @info(name = 'query')
                    from deviceDoorStream#window.timeBatch(20 sec) join deviceHealthStream#window.timeBatch(20 sec)
                    on deviceDoorStream.smartDeviceId == deviceHealthStream.smartDeviceId
                    select deviceHealthStream.smartDeviceId  as smartDeviceId,
                    deviceDoorStream.gatewayId,
                    sum(deviceDoorStream.doorOpenDuration) as totalDuration,
                    avg(deviceHealthStream.temperature) as averageTemperature
                    group by deviceHealthStream.smartDeviceId
                    having totalDuration < $maxDuration and ( averageTemperature < $maxTemperature and averageTemperature > $minTemperature)
                    insert into alertStream;
                 ]]>
            </executionPlan>
            <parameters>
                <parameter name="$maxDuration" type="int">
                    <displayName>Maximum duration</displayName>
                    <description>Maximum duration of between time windows</description>
                    <defaultValue>2</defaultValue>
                </parameter>

                <parameter name="$minTemperature" type="int">
                    <displayName>Minimum temperature</displayName>
                    <description>Minimum temperature average temperature should be</description>
                    <defaultValue>2</defaultValue>
                </parameter>

                <parameter name="$maxTemperature" type="int">
                    <displayName>Maximum temperature</displayName>
                    <description>Maximum temperature average temperature should be</description>
                    <defaultValue>8</defaultValue>
                </parameter>
            </parameters>
        </template>

        <template name="Template2">
            <description>Trigger alert by specifying minimum maximum temperature and total duration values</description>
            <executionPlan>
                <![CDATA[
               /* Enter a unique ExecutionPlan */
                    @Plan:name('TemperatureAnalysis')

                    /* Enter a unique description for ExecutionPlan */
                    -- @Plan:description('ExecutionPlan')

                    /* define streams/tables and write queries here ... */



                    @Import('deviceHealthStream:1.0.0')
                    define stream deviceHealthStream (smartDeviceHealthRecordId int, smartDeviceId int, gatewayId int, eventId int, eventTime string, eventTypeId int, lightIntensity int, temperature float, humidity float, soundLevel float, isDoorOpen bool, powerStatusId int, batteryLevel float, createdOn string);

                    @Import('deviceDoorStream:1.0.0')
                    define stream deviceDoorStream (smartDeviceDoorStatusId int, smartDeviceId int, gatewayId int, eventTime string, EventId int, doorOpen string, createdOn string, doorOpenDuration int);

                    @Export('alertStream:1.0.0')
                    define stream alertStream2 (smartDeviceId int, gatewayId int, totalDuration long, averageTemperature double);

                    @info(name = 'query')
                    from deviceDoorStream#window.timeBatch(20 sec) join deviceHealthStream#window.timeBatch(20 sec)
                    on deviceDoorStream.smartDeviceId == deviceHealthStream.smartDeviceId
                    select deviceHealthStream.smartDeviceId  as smartDeviceId,
                    deviceDoorStream.gatewayId,
                    sum(deviceDoorStream.doorOpenDuration) as totalDuration,
                    avg(deviceHealthStream.temperature) as averageTemperature
                    group by deviceHealthStream.smartDeviceId
                    having (totalDuration < $maxDuration and totalDuration > $minDuration ) and ( averageTemperature < $maxTemperature and averageTemperature > $minTemperature)
                    insert into alertStream;
                 ]]>
            </executionPlan>
            <parameters>
                <parameter name="$maxDuration" type="int">
                    <displayName>Maximum duration</displayName>
                    <description>Maximum duration of between time windows</description>
                    <defaultValue>10</defaultValue>
                </parameter>

                <parameter name="$minDuration" type="int">
                    <displayName>Minimum duration</displayName>
                    <description>Minimum duration of between time windows</description>
                    <defaultValue>2</defaultValue>
                </parameter>

                <parameter name="$minTemperature" type="int">
                    <displayName>Minimum temperature</displayName>
                    <description>Minimum temperature average temperature should be</description>
                    <defaultValue>2</defaultValue>
                </parameter>

                <parameter name="$maxTemperature" type="int">
                    <displayName>Maximum temperature</displayName>
                    <description>Maximum temperature average temperature should be</description>
                    <defaultValue>12</defaultValue>
                </parameter>
            </parameters>
        </template>


        <template name="Template3">
            <description>Trigger alert by specifying only minimum value</description>
            <executionPlan>
                <![CDATA[
               /* Enter a unique ExecutionPlan */
                    @Plan:name('TemperatureAnalysis')

                    /* Enter a unique description for ExecutionPlan */
                    -- @Plan:description('ExecutionPlan')

                    /* define streams/tables and write queries here ... */



                    @Import('deviceHealthStream:1.0.0')
                    define stream deviceHealthStream (smartDeviceHealthRecordId int, smartDeviceId int, gatewayId int, eventId int, eventTime string, eventTypeId int, lightIntensity int, temperature float, humidity float, soundLevel float, isDoorOpen bool, powerStatusId int, batteryLevel float, createdOn string);

                    @Import('deviceDoorStream:1.0.0')
                    define stream deviceDoorStream (smartDeviceDoorStatusId int, smartDeviceId int, gatewayId int, eventTime string, EventId int, doorOpen string, createdOn string, doorOpenDuration int);

                    @Export('alertStream:1.0.0')
                    define stream alertStream2 (smartDeviceId int, gatewayId int, totalDuration long, averageTemperature double);

                    @info(name = 'query')
                    from deviceDoorStream#window.timeBatch(20 sec) join deviceHealthStream#window.timeBatch(20 sec)
                    on deviceDoorStream.smartDeviceId == deviceHealthStream.smartDeviceId
                    select deviceHealthStream.smartDeviceId  as smartDeviceId,
                    deviceDoorStream.gatewayId,
                    sum(deviceDoorStream.doorOpenDuration) as totalDuration,
                    avg(deviceHealthStream.temperature) as averageTemperature
                    group by deviceHealthStream.smartDeviceId
                    having  $minTemperature > $minTemperature
                    insert into alertStream;
                 ]]>
            </executionPlan>
            <parameters>
                <parameter name="$minTemperature" type="int">
                    <displayName>Minimum temperature</displayName>
                    <description>Minimum temperature average temperature should be</description>
                    <defaultValue>15</defaultValue>
                </parameter>
            </parameters>
        </template>

        <template name="Template3">
            <description>Trigger alert by specifying only minimum value</description>
            <executionPlan>
                <![CDATA[
               /* Enter a unique ExecutionPlan */
                    @Plan:name('TemperatureAnalysis')

                    /* Enter a unique description for ExecutionPlan */
                    -- @Plan:description('ExecutionPlan')

                    /* define streams/tables and write queries here ... */

                    @Import('deviceHealthStream:1.0.0')
                    define stream deviceHealthStream (smartDeviceHealthRecordId int, smartDeviceId int, gatewayId int, eventId int, eventTime string, eventTypeId int, lightIntensity int, temperature float, humidity float, soundLevel float, isDoorOpen bool, powerStatusId int, batteryLevel float, createdOn string);

                    @Import('deviceDoorStream:1.0.0')
                    define stream deviceDoorStream (smartDeviceDoorStatusId int, smartDeviceId int, gatewayId int, eventTime string, EventId int, doorOpen string, createdOn string, doorOpenDuration int);

                    @Export('alertStream:1.0.0')
                    define stream alertStream (smartDeviceId int, gatewayId int, totalDuration long, averageTemperature double);

                    @info(name = 'query')
                    from deviceDoorStream#window.timeBatch($timeBatchWindow) join deviceHealthStream#window.timeBatch($timeBatchWindow)
                    on deviceDoorStream.smartDeviceId == deviceHealthStream.smartDeviceId
                    select deviceHealthStream.smartDeviceId  as smartDeviceId,
                    deviceDoorStream.gatewayId,
                    sum(deviceDoorStream.doorOpenDuration) as totalDuration,
                    avg(deviceHealthStream.temperature) as averageTemperature
                    group by deviceHealthStream.smartDeviceId
                    having totalDuration < $maxDuration and
                    (time:timestampInMilliseconds(time:currentTime(),'HH:mm:ss') >
                                      time:timestampInMilliseconds('$startTime','HH:mm:ss')
                                     and time:timestampInMilliseconds(time:currentTime(),'HH:mm:ss') <
                                      time:timestampInMilliseconds('$endTime','HH:mm:ss'))
                    insert into alertStream;
                 ]]>
            </executionPlan>
            <parameters>
                <parameter name="$timeBatchWindow" type="time">
                    <displayName>Time batch window size</displayName>
                    <description>Maximum door open duration (time value eg:-60 min)</description>
                    <defaultValue>60 min</defaultValue>
                </parameter>
                <parameter name="$maxDuration" type="int">
                    <displayName>Maximum duration</displayName>
                    <description>Maximum door open duration (specify value in seconds)</description>
                    <defaultValue>300</defaultValue>
                </parameter>
                <parameter name="$startTime" type="string">
                    <displayName>Starting time</displayName>
                    <description>Value should be in 'HH:mm:ss' format</description>
                    <defaultValue>08:00:00</defaultValue>
                </parameter>
                <parameter name="$endTime" type="string">
                    <displayName>Ending time</displayName>
                    <description>Value should be in 'HH:mm:ss' format</description>
                    <defaultValue>20:00:00</defaultValue>
                </parameter>
            </parameters>
        </template>


    </templates>
    <streams>
        <stream>
            {
            "streamId": "deviceHealthStream:1.0.0",
            "name": "deviceHealthStream",
            "version": "1.0.0",
            "nickName": "",
            "description": "",
            "metaData": [],
            "correlationData": [],
            "payloadData": [
            {
            "name": "smartDeviceHealthRecordId",
            "type": "INT"
            },
            {
            "name": "smartDeviceId",
            "type": "INT"
            },
            {
            "name": "gatewayId",
            "type": "INT"
            },
            {
            "name": "eventId",
            "type": "INT"
            },
            {
            "name": "eventTime",
            "type": "STRING"
            },
            {
            "name": "eventTypeId",
            "type": "INT"
            },
            {
            "name": "lightIntensity",
            "type": "INT"
            },
            {
            "name": "temperature",
            "type": "FLOAT"
            },
            {
            "name": "humidity",
            "type": "FLOAT"
            },
            {
            "name": "soundLevel",
            "type": "FLOAT"
            },
            {
            "name": "isDoorOpen",
            "type": "BOOL"
            },
            {
            "name": "powerStatusId",
            "type": "INT"
            },
            {
            "name": "batteryLevel",
            "type": "FLOAT"
            },
            {
            "name": "createdOn",
            "type": "STRING"
            }
            ]
            }
        </stream>
        <stream>
            {
            "streamId": "deviceDoorStream:1.0.0",
            "name": "deviceDoorStream",
            "version": "1.0.0",
            "nickName": "",
            "description": "",
            "metaData": [],
            "correlationData": [],
            "payloadData": [
            {
            "name": "smartDeviceDoorStatusId",
            "type": "INT"
            },
            {
            "name": "smartDeviceId",
            "type": "INT"
            },
            {
            "name": "gatewayId",
            "type": "INT"
            },
            {
            "name": "eventTime",
            "type": "STRING"
            },
            {
            "name": "EventId",
            "type": "INT"
            },
            {
            "name": "doorOpen",
            "type": "STRING"
            },
            {
            "name": "createdOn",
            "type": "STRING"
            },
            {
            "name": "doorOpenDuration",
            "type": "INT"
            }
            ]
            }
        </stream>
        <stream>
            {
            "name": "alertStream",
            "version": "1.0.0",
            "nickName": "",
            "description": "",
            "payloadData": [
            {
            "name": "smartDeviceId",
            "type": "INT"
            },
            {
            "name": "gatewayId",
            "type": "INT"
            },
            {
            "name": "totalDuration",
            "type": "LONG"
            },
            {
            "name": "averageTemperature",
            "type": "DOUBLE"
            }
            ]
            }
        </stream>
    </streams>
</templateDomain>